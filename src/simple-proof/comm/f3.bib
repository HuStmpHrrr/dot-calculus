@misc{source,
URL = "https://github.com/HuStmpHrrr/dot-calculus/tree/alg/src/simple-proof/alg-proof",
title = "proof source",
}

@misc{metalib,
URL = "https://github.com/plclub/metalib",
title = "metalib",
note = "cf0e9f8ff0a1f918fd9829d9c49dcd0dd9142e67",
annote = "commit: cf0e9f8ff0a1f918fd9829d9c49dcd0dd9142e67",
}

@misc{cpdt,
URL = "http://adam.chlipala.net/cpdt/",
title = "Certified Programming with Dependent Types",
}

@misc{tycls,
URL = "https://coq.inria.fr/refman/type-classes.html",
title = "Chapter 20  Type Classes",
}

@InProceedings{10.1007/978-3-540-71067-7_23,
author="Sozeau, Matthieu
and Oury, Nicolas",
editor="Mohamed, Otmane Ait
and Mu{\~{n}}oz, C{\'e}sar
and Tahar, Sofi{\`e}ne",
title="First-Class Type Classes",
booktitle="Theorem Proving in Higher Order Logics",
year="2008",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="278--293",
abstract="Type Classes have met a large success in Haskell and Isabelle, as a solution for sharing notations by overloading and for specifying with abstract structures by quantification on contexts. However, both systems are limited by second-class implementations of these constructs, and these limitations are only overcomed by ad-hoc extensions to the respective systems. We propose an embedding of type classes into a dependent type theory that is first-class and supports some of the most popular extensions right away. The implementation is correspondingly cheap, general and integrates well inside the system, as we have experimented in Coq. We show how it can be used to help structured programming and proving by way of examples.",
isbn="978-3-540-71067-7"
}
